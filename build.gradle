import groovy.xml.XmlUtil
import groovy.xml.XmlParser
import org.apache.kafka.clients.admin.AdminClient
import org.apache.kafka.clients.admin.AdminClientConfig
import org.apache.kafka.clients.admin.NewTopic

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.apache.kafka:kafka-clients:3.6.2")
    }
}

plugins {
    id "org.embulk.embulk-plugins" version "0.7.0"
    id "java"
    id "maven-publish"
    id "signing"
    id("com.diffplug.spotless") version "6.25.0"
}

repositories {
    mavenCentral()

    maven {
        url "https://packages.confluent.io/maven/"
    }
}

group = "io.github.joker1007"
version = "0.4.0"
description = "Embulk output plugin for Apache Kafka"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withJavadocJar()
    withSourcesJar()
}

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

dependencies {
    compileOnly "org.embulk:embulk-spi:0.11"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.embulk:embulk-api:0.10.43"
    testImplementation "org.embulk:embulk-spi:0.11"
    testImplementation "org.embulk:embulk-core:0.11.3"
    testImplementation "org.embulk:embulk-junit4:0.11.3"
    testImplementation "org.embulk:embulk-input-file:0.11.0"
    testImplementation "org.embulk:embulk-parser-csv:0.11.6"
    testImplementation "org.embulk:embulk-deps:0.11.3"

    implementation("org.embulk:embulk-util-config:0.5.0")

    implementation("org.apache.kafka:kafka-clients:3.6.2")
    implementation("org.apache.avro:avro:1.11.3")

    implementation("io.confluent:kafka-avro-serializer:7.6.1") {
        exclude group: "org.apache.kafka", module: "kafka-clients"
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.yaml", module: "snakeyaml"
    }

    testImplementation "org.testcontainers:testcontainers:1.19.7"
    testImplementation "org.testcontainers:kafka:1.19.7"
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    from rootProject.file("LICENSE.txt")
}

javadocJar {
    from rootProject.file("LICENSE.txt")
}

sourcesJar {
    from rootProject.file("LICENSE.txt")
}

spotless {
    java {
        importOrder()
        removeUnusedImports()

        googleJavaFormat()
    }
}

tasks.compileJava {
    dependsOn(tasks.spotlessApply)
}

embulkPlugin {
    mainClass = "org.embulk.output.kafka.KafkaOutputPlugin"
    category = "output"
    type = "kafka"
}

test {
    minHeapSize = "512m"
    maxHeapSize = "4g"
}

task generateEmbulkProperties {
    doLast {
        mkdir ".embulk"
        def f = file(".embulk/embulk.properties")
        f.write("m2_repo=${System.properties["user.home"]}/.m2/repository\nplugins.output.kafka=maven:${project.group}:kafka:${project.version}")
    }
}

task createTestTopic {
    doLast {
        var props = new Properties()
        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092")
        props.put(AdminClientConfig.CLIENT_ID_CONFIG, "embulk-output-kafka-test")
        var admin = AdminClient.create(props)
        admin.createTopics(Collections.singletonList(new NewTopic("json-topic", 8, (short) 1))).all().get()
        admin.close()
    }
}

gem {
    from("LICENSE.txt")
    authors = ["joker1007"]
    email = ["kakyoin.hierophant@gmail.com"]
    description = "Kafka output plugin for Embulk"
    summary = "Kafka output plugin for Embulk"
    homepage = "https://github.com/joker1007/embulk-output-kafka"
    licenses = ["MIT"]
}

gemPush {
    host = "https://rubygems.org"
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            // Publish it with "publishEmbulkPluginMavenPublicationToMavenRepository".
            from components.java  // Must be "components.java". The dependency modification works only for it.
            pom {
                name = "embulk-output-kafka"
                packaging = "jar"
                description = "Embulk output plugin for Apache Kafka"
                url = "https://github.com/joker1007/embulk-output-kafka"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }

                scm {
                    connection = "scm:git://github.com/joker1007/embulk-output-kafka.git"
                    developerConnection = "scm:git@github.com:joker1007/embulk-output-kafka.git"
                    url = "https://github.com/joker1007/embulk-output-kafka"
                }

                developers {
                    developer {
                        id = "joker1007"
                        name = "Tomohiro Hashidate"
                        email = "kakyoin.hierophant@gmail.com"
                    }
                }
            }
        }
    }
    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    onlyIf { System.getenv().get("SKIP_SIGNING") == null }
}

tasks.withType(GenerateMavenPom) {
    doLast {
        def f = file(layout.buildDirectory.file("publications/maven/pom-default.xml"))
        XmlParser parser = new XmlParser()
        def xml = parser.parse(f)
        def repos = "<repositories>\n" +
                "  <repository>\n" +
                "    <id>confluent</id>\n" +
                "    <url>https://packages.confluent.io/maven/</url>\n" +
                "  </repository>\n" +
                "</repositories>\n"
        def reposNode = parser.parseText(repos)
        xml.append(reposNode)
        f.write(XmlUtil.serialize(xml))
    }
}
